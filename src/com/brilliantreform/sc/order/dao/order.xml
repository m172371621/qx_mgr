<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="order">

	<typeAlias alias="order" type="com.brilliantreform.sc.order.po.Order" />
	<typeAlias alias="searchBean"
		type="com.brilliantreform.sc.order.po.OrderSearch" />
	<typeAlias alias="countOrder" type="com.brilliantreform.sc.order.po.CountOrder" />
	<typeAlias alias="addInfo" type="com.brilliantreform.sc.order.po.AddInfo" />
	<typeAlias alias="queryBatch" type="com.brilliantreform.sc.order.po.QueryBatch"/>
	<typeAlias alias="winningInfo" type="com.brilliantreform.sc.order.po.WinningInfo"/>
	<typeAlias alias="deliveryAddress" type="com.brilliantreform.sc.order.po.DeliveryAddress"/>


	<insert id="insertOrder" parameterClass="order">
		INSERT INTO order_product
		(order_serial, community_id,user_id, product_id, product_amount,
		product_price,order_price,
		delivery_type,delivery_addr,order_phone,delivery_price,
		product_period, pay_type, order_status,
		comment_status,channel,order_time, delivery_time,pay_time)
		VALUES
		(#order_serial#, #community_id#,#user_id#, #product_id#,
		#product_amount#, #product_price#, #order_price#,
		#delivery_type#,#delivery_addr#,#order_phone#,#delivery_price#,
		#product_period#, #pay_type#, #order_status#, #comment_status#,
		#channel#,#order_time#, #delivery_time#, #pay_time#)
		<selectKey resultClass="int" keyProperty="order_id">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
	</insert>

	<select id="getOrderList" resultClass="order" parameterClass="map">
		select t1.*,t2.name as product_name ,t2.picture as product_pic from
		order_product t1,service_product t2
		where user_id = #user_id# and
		t1.product_id = t2.product_id

		<dynamic>
			<isNotNull property="month" prepend="and">
				DATE_FORM
				AT(order_time,'%Y-%m') = #month#
			</isNotNull>
		</dynamic>
	</select>

	<update id="updateOrderBySerial" parameterClass="order">
		update
		order_product
		set
		order_status = #order_status#
		where
		order_serial = #order_serial#  
	</update>

	<select id="getOrderBySerial3" resultClass="hashmap" parameterClass="String">
		SELECT t1.* FROM order_base t1 WHERE t1.order_serial = #order_serial#
	</select>

	<select id="getOrderProductMapById" resultClass="hashmap" parameterClass="int">
		SELECT * FROM order_product WHERE order_id = #order_id#
	</select>

	<select id="getOrderById" resultClass="order" parameterClass="int">
		select t1.*,
		t2.name as product_name ,
		t3.loginname as user_name,
		t3.phone as user_phone,
		t5.communityName as c_name,
    	IFNULL(dd.distri_staus,-1) distri_staus,
    	t6.pay_type_ext,
    	t6.order_status as order_base_status,
    	t6.coupon_id
		from order_product t1
    INNER JOIN service_product t2 ON t1.product_id = t2.product_id
    INNER JOIN user_login t3 ON t3.userid = t1.user_id
    INNER JOIN user_baseinfo t4 ON t4.userid = t3.userid
    INNER JOIN community_base t5 ON t5.communityId = t4.communityId
    INNER JOIN order_base t6 ON t1.order_serial = t6.order_serial
    LEFT JOIN delivery_detail dd ON t1.order_serial = dd.order_serial
		where t1.order_id = #id#
	</select>
	<select id="getOrderBySerial" resultClass="order" parameterClass="string">
		select t1.*,t2.name as product_name ,t2.picture as product_pic from order_product t1,service_product t2 where order_serial = #id# and t1.product_id = t2.product_id
	</select>

	<select id="getOrderBySerialList" resultClass="order"
		parameterClass="string">
		select t1.*,t2.name as product_name ,t2.picture as
		product_pic from order_product t1,service_product t2 where
		order_serial = #id# and t1.product_id = t2.product_id and
		t1.order_status &lt;&gt; 23
	</select>
	
		<select id="getOrderBySerialList2" resultClass="order"
		parameterClass="order">
		select t1.*,t2.name as product_name ,t2.picture as
		product_pic from order_product t1,service_product t2 where
		order_serial = #order_serial# and t1.product_id = t2.product_id and
		t1.order_status &lt;&gt; 23
		<isNotNull property="community_id">
		    and t1.community_id=#community_id#
		</isNotNull>
	</select>

	<!-- mgr -->

	<select id="searchOrderList" resultClass="order" parameterClass="searchBean">
		SELECT t1.*,
		t2.name AS product_name ,
		t3.loginname AS user_name,
		t3.phone AS user_phone,
		IFNULL(t4.distri_staus,-1) distri_staus
		FROM
		order_product t1
		INNER JOIN service_product t2 ON t1.product_id =
		t2.product_id
		INNER JOIN user_login t3 ON t1.user_id = t3.userid
		LEFT
		JOIN delivery_detail t4 ON t1.order_serial = t4.order_serial
		where 1=1
		<dynamic>
			<isNotEmpty property="cid" prepend="and">
				t1.community_id = #cid#
			</isNotEmpty>
			<isNotEmpty property="order_serial" prepend="and">
				t1.order_serial
				= #order_serial#
			</isNotEmpty>
			<isNotEmpty property="user_name" prepend="and">
				t3.loginname =
				#user_name#
			</isNotEmpty>
			<isNotEmpty property="user_phone" prepend="and">
				t1.order_phone =
				#user_phone#
			</isNotEmpty>
			<isNotEmpty property="product_name" prepend="and">
				t1.product_name like
				'%$product_name$%'
			</isNotEmpty>
			<isNotEmpty property="sid" prepend="and">
				t2.service_id = #sid#
			</isNotEmpty>
			<isNotEmpty property="order_status" prepend="and">
				<isEqual property="order_status" compareValue="122">
					(t1.order_status = 1 or t1.order_status = 22)
				</isEqual>
				<isNotEqual property="order_status" compareValue="122">
					t1.order_status= #order_status#
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property="pay_type" prepend="and">
				t1.pay_type=
				#pay_type#
			</isNotEmpty>
			<isNotEmpty property="start_time" prepend="and">
				t1.order_time <![CDATA[>=]]>
				#start_time#
			</isNotEmpty>
			<isNotEmpty property="end_time" prepend="and">
				t1.order_time <![CDATA[<]]>
				#end_time#
			</isNotEmpty>
			<isNotEmpty property="pickup_start_time" prepend="and">
				t1.pickup_time <![CDATA[>=]]>
				#pickup_start_time#
			</isNotEmpty>
			<isNotEmpty property="pickup_end_time" prepend="and">
				t1.pickup_time <![CDATA[<]]>
				#pickup_end_time#
			</isNotEmpty>
		</dynamic>
		order by t1.order_time desc
		limit #begin#,#size#;
	</select>

	<select id="countOrderList" resultClass="int" parameterClass="searchBean">
		select count(0)
		from order_product t1,
		service_product t2,
		user_login t3
		where t1.product_id = t2.product_id
		and t1.user_id = t3.userid
		<dynamic>
			<isNotNull property="cid" prepend="and">
				t1.community_id = #cid#
			</isNotNull>
			<isNotNull property="sid" prepend="and">
				t2.service_id = #sid#
			</isNotNull>
			<isNotNull property="order_serial" prepend="and">
				t1.order_serial
				= #order_serial#
			</isNotNull>
			<isNotNull property="user_name" prepend="and">
				t3.loginname =
				#user_name#
			</isNotNull>
			<isNotNull property="user_phone" prepend="and">
				t1.order_phone =
				#user_phone#
			</isNotNull>
			<isNotNull property="product_name" prepend="and">
				t2.name like
				'%$product_name$%'
			</isNotNull>
			<isNotNull property="order_status" prepend="and">
				<isEqual property="order_status" compareValue="122">
					(t1.order_status = 1 or t1.order_status = 22)
				</isEqual>
				<isNotEqual property="order_status" compareValue="122">
					t1.order_status= #order_status#
				</isNotEqual>
			</isNotNull>
			<isNotNull property="pay_type" prepend="and">
				t1.pay_type=
				#pay_type#
			</isNotNull>
			<isNotNull property="start_time" prepend="and">
				t1.order_time <![CDATA[>]]>
				#start_time#
			</isNotNull>
			<isNotNull property="end_time" prepend="and">
				t1.order_time <![CDATA[<=]]>
				#end_time#
			</isNotNull>
			<isNotNull property="pickup_start_time" prepend="and">
				t1.pickup_time <![CDATA[>]]>
				#pickup_start_time#
			</isNotNull>
			<isNotNull property="pickup_end_time" prepend="and">
				t1.pickup_time <![CDATA[<=]]>
				#pickup_end_time#
			</isNotNull>
		</dynamic>
	</select>

	<update id="updateOrder" parameterClass="order">
		update order_product
		set order_id = #order_id#
		<dynamic>
			<isNotNull property="pay_type" prepend=",">
				pay_type =
				#pay_type#
			</isNotNull>
			<isNotNull property="delivery_type" prepend=",">
				delivery_type =
				#delivery_type#
			</isNotNull>
			<isNotNull property="product_amount" prepend=",">
				product_amount = #product_amount#
			</isNotNull>
			<isNotNull property="product_price" prepend=",">
				product_price =
				#product_price#
			</isNotNull>
			<isNotNull property="delivery_price" prepend=",">
				delivery_price = #delivery_price#
			</isNotNull>
			<isNotNull property="order_price" prepend=",">
				order_price =
				#order_price#
			</isNotNull>
			<isNotNull property="order_status">
				<isEqual property="order_status" compareValue="1" prepend=",">
					order_status = 1 , delivery_time = null , pickup_time = null
				</isEqual>
				<isEqual property="order_status" compareValue="2" prepend=",">
					order_status = 2 , delivery_time = now() , pickup_time = null
				</isEqual>
				<isEqual property="order_status" compareValue="3" prepend=",">
					order_status = 3 , delivery_time = now() , pickup_time = now()
				</isEqual>
				<isEqual property="order_status" compareValue="11" prepend=",">
					order_status = 11, delivery_time = null
				</isEqual>
				<isEqual property="order_status" compareValue="12" prepend=",">
					order_status = 12, delivery_time = now()
				</isEqual>
			</isNotNull>
		</dynamic>
		where order_id = #order_id#
	</update>

	<select id="searchProduct" resultClass="hashmap" parameterClass="map">
		select t1.service_id as service_id,
		t1.product_id as product_id,
		t1.name as product_name,
		t2.service_name as service_name
		from
		service_product t1,
		service_base t2
		where t1.service_id = t2.service_id
		and t1.product_type = 1
		and t1.community_id = #cid#
		<dynamic>
			<isNotNull property="product_name" prepend="and">
				t1.name like
				'%$product_name$%'
			</isNotNull>
			<isNotNull property="service_id" prepend="and">
				t1.service_id =
				#service_id#
			</isNotNull>
			<isNotNull property="product_id" prepend="and">
				t1.product_id =
				#product_id#
			</isNotNull>
			<isNotNull property="service_name" prepend="and">
				t2.service_name
				like '%$service_name$%'
			</isNotNull>
		</dynamic>

		order by t1.createTime desc
		limit #begin#,#size#;
	</select>

	<select id="countProduct" resultClass="int" parameterClass="map">
		select count(0)
		from service_product t1,
		service_base t2
		where
		t1.service_id = t2.service_id
		and t1.product_type = 1
		and
		t1.community_id = #cid#
		<dynamic>
			<isNotNull property="product_name" prepend="and">
				t1.name like
				'%$product_name$%'
			</isNotNull>
			<isNotNull property="service_id" prepend="and">
				t1.service_id =
				#service_id#
			</isNotNull>
			<isNotNull property="product_id" prepend="and">
				t1.product_id =
				#product_id#
			</isNotNull>
			<isNotNull property="service_name" prepend="and">
				t2.service_name
				like '%$service_name$%'
			</isNotNull>
		</dynamic>
	</select>

	<select id="countOrderByProduct" resultClass="int"
		parameterClass="int">
		select count(0)
		from order_product
		where product_id =
		#product_id#
		and order_status = 1
	</select>

	<update id="updateOrderByProduct" parameterClass="int">
		update
		order_product
		set
		order_status = 2 , delivery_time = now()
		where
		product_id = #product_id# and order_status = 1
	</update>

	<update id="updatePreSaleOrder" parameterClass="String">
		UPDATE order_base SET order_status = 2, delivery_time = now() WHERE order_serial = #order_serial# AND order_status = 5
	</update>

	<update id="updatePreSaleOrderProduct" parameterClass="String">
		UPDATE order_product SET order_status = 2, delivery_time = now() WHERE order_serial = #order_serial# AND order_status = 5
	</update>

	<delete id="deleteOrder" parameterClass="int">
		delete from
		order_product
		where
		order_id = #id#
	</delete>

	<insert id="insertDeleteOrder" parameterClass="int">
		insert into
		order_product_del
		select * from order_product where
		order_id = #id#
	</insert>

	<update id="updateUserCard" parameterClass="int">
		update user_card
		set
		card_id = 6
		where order_id = #order_id#
	</update>

	<update id="updateUserCardIdBySerial" parameterClass="hashmap">
		UPDATE user_card SET card_id = #card_id# WHERE order_id = #order_serial#
	</update>

	<select id="countNewOrder" resultClass="int" parameterClass="int">
		select count(0)
		from
		order_product
		where
		community_id = #cid#
		and (order_status = 1 or order_status = 11 or order_status = 21)
		and DATE_FORMAT(order_time,'%Y-%m-%d %H:%i') =
		DATE_FORMAT(now(),'%Y-%m-%d %H:%i') ;
	</select>

	<select id="sumOrder" parameterClass="map" resultClass="countOrder">
		<!--
			SELECT op.product_id,sum(op.product_amount)
			amount,sum(op.product_price) price FROM order_product op where
			op.order_time between #start# and #end# GROUP BY op.product_id
		-->
		SELECT op.product_id,sp.name product_name,
		sum(op.product_amount)
		amount,ROUND(sum(op.product_price), 1) price ,sp.product_type as
		order_type
		,op.community_id,sp.product_type
		FROM order_product op
		<![CDATA[
		LEFT JOIN service_product sp on sp.product_id=op.product_id
		where op.order_time >= #start# and op.order_time<= #end# and op.order_status=3
		]]>
		GROUP BY op.product_id
		HAVING op.community_id=#cid#
		<isNotNull property="pty" prepend="and">
			sp.product_type =#pty#
		</isNotNull>
	</select>

	<select id="select_Stock_change_log" parameterClass="string"
		resultClass="hashmap">
		select *
		from stock_change_log
		where
		order_serial = #order_serial#
		and log_type = 6
	</select>
	<!-- ////////// -->
	<update id="update_product_batch_stock" parameterClass="map" >
	     update product_batch_stock 
	     set order_current_sum = order_current_sum + #order_current_sum#
	     where 
	     	batch_serial = #batch_serial# 
	     	and product_id = #product_id#
	</update>
	
	<update id="update_product_real_stock" parameterClass="map">
	     update product_real_stock 
	     set real_stock_sum = real_stock_sum + #real_stock_sum#
	     where 
	     	product_id = #product_id#
	</update>
	
	<insert id="insert_stock_change_log" parameterClass="map">
		INSERT INTO `stock_change_log`(`product_id`,`community_id`,`batch_serial`,`order_serial`,`log_type`,`order_current_sum`,`stock_sum`,`IP`,`create_by`,`create_type`,`create_time` )
		VALUES (#product_id#,#community_id#,#batch_serial#,#order_serial#,#log_type#,#order_current_sum#,#stock_sum#,#IP#,#create_by#,#create_type#,now());
	</insert>
		<insert id="addOrder" parameterClass="addInfo">
		INSERT INTO service_sumery
				(
				<isNotNull property="cleaning_price" close=",">
	            cleaning_price
	            </isNotNull>
	            <isNotNull property="cleaning_remarks" close=",">
	             cleaning_remarks
	            </isNotNull>
	             <isNotNull property="order_price" close=",">
	             order_price
	            </isNotNull>
	             <isNotNull property="order_remarks" close=",">
	             order_remarks
	            </isNotNull>
	             <isNotNull property="leather_price" close=",">
	             leather_price
	            </isNotNull>
	             <isNotNull property="leather_remarks" close=",">
	             leather_remarks
	            </isNotNull>
	             <isNotNull property="rocking_car_price" close=",">
	             rocking_car_price
	            </isNotNull>
	             <isNotNull property="rocking_car_remarks" close=",">
	             rocking_car_remarks 
	            </isNotNull>
	             community_id
	             )
		VALUES (
				<isNotNull property="cleaning_price" close=",">
	            #cleaning_price#
	            </isNotNull>
	            <isNotNull property="cleaning_remarks" close=",">
	             #cleaning_remarks#
	            </isNotNull>
	             <isNotNull property="order_price" close=",">
	             #order_price#
	            </isNotNull>
	             <isNotNull property="order_remarks" close=",">
	             #order_remarks#
	            </isNotNull>
	             <isNotNull property="leather_price" close=",">
	             #leather_price#
	            </isNotNull>
	             <isNotNull property="leather_remarks" close=",">
	             #leather_remarks#
	            </isNotNull>
	             <isNotNull property="rocking_car_price" close=",">
	             #rocking_car_price#
	            </isNotNull>
	             <isNotNull property="rocking_car_remarks" close=",">
	             #rocking_car_remarks#
	            </isNotNull>
		        #community_id#);
		        <selectKey resultClass="java.lang.Integer" keyProperty="service_sumery_id">
   					SELECT LAST_INSERT_ID()
  				</selectKey>
	</insert>
	
	<!--  查询QueryList 集合 -->
	<select id="queryBatchList" parameterClass="queryBatch" resultClass="queryBatch">
		SELECT pbs.batch_serial AS batch_serial,pbs.order_current_sum AS stock_sum ,sp.name AS name,sb.service_name AS service_name,pbs.incommint_price AS incommint_price, pbs.product_id
		,psd.create_by
		FROM product_batch_stock pbs
		INNER JOIN service_product sp ON pbs.product_id = sp.product_id 
		INNER JOIN service_base sb ON sb.service_id = sp.service_id
		INNER JOIN product_stockchange_detail psd ON psd.batch_serial= pbs.batch_serial
		WHERE pbs.stock_sum != 0  
		AND sp.name LIKE  concat('%',#service_name#,'%') 
		AND	pbs.community_id = #community_id# 
		ORDER BY pbs.create_time DESC
		limit #begin#,#size#
	</select>
	<!--  查询QueryList 集合 -->
	<select id="queryBatchCount" resultClass="int" parameterClass="queryBatch">
		SELECT COUNT(0)FROM product_batch_stock pbs, service_product sp, service_base sb 
			WHERE pbs.product_id = sp.product_id AND sp.service_id = sb.service_id and
			pbs.stock_sum != 0 AND sb.service_name LIKE '%$service_name$%' AND pbs.community_id = #community_id#
	</select>

    <sql id="getWinning_sql">
        FROM user_card uc
        INNER JOIN user_login ul ON uc.user_id = ul.userid
        INNER JOIN card_info ci ON  uc.card_id = ci.card_id
        INNER JOIN user_baseinfo ub ON ub.userid=uc.user_id
        INNER JOIN community_base cb ON ub.communityid = cb.communityid
        WHERE ci.card_id BETWEEN 3 AND 5
        <isNotEmpty property="community_list" prepend="and">
            ub.communityId IN
            <iterate property="community_list" open="(" close=")" conjunction=",">
                #community_list[]#
            </iterate>
        </isNotEmpty>
        <isNotEmpty property="card_name" prepend="and">
            ci.card_name like '$card_name$%'
        </isNotEmpty>
        <isNotEmpty property="phone" prepend="and">
            ul.phone like '$phone$%'
        </isNotEmpty>
        <isNotEmpty  property="start_time" prepend="and">
            uc.createTime &gt;
            #start_time#
        </isNotEmpty >
        <isNotEmpty  property="end_time" prepend="and">
            uc.createTime &lt;
            #end_time#
        </isNotEmpty >
    </sql>

	<!--中奖记录查询-->
	<select id="getWinning" resultClass="winningInfo" parameterClass="map">
		SELECT ci.card_name,ul.phone, ul.userid,uc.createTime,uc.awardStatus,uc.awardTime,uc.operatorName,uc.order_id, cb.communityname as community_name
		<include refid="getWinning_sql"/>
        ORDER BY uc.createTime DESC,ci.card_name DESC
        limit #begin#,#size#
	</select>
	
	<!--中奖记录查询数量-->
	<select id="getWinningCount" resultClass="int" parameterClass="map">
		SELECT COUNT(0)
        <include refid="getWinning_sql"/>
	</select>
	<!-- 更新领奖状态 -->
	<update id="awardUpdate" parameterClass="map">
		UPDATE 
			user_card 
		SET
        	awardStatus = #awardStatus# ,awardTime=#awardTime#, operatorName=#operatorName# WHERE order_id = #order_id# 
	</update>
	<parameterMap class="java.util.HashMap" id="swapParameters">
		<parameter property="p_order_serial" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_product_id" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_product_amount" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_user_id" javaType="java.lang.Integer"
			jdbcType="INT" mode="IN" />
		<parameter property="p_pay_type" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_pay_type_ext" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_order_status" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_cid" javaType="java.lang.Integer"
			jdbcType="int" mode="IN" />
		<parameter property="p_channel" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_delivery_type" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_delivery_price" javaType="java.lang.Float"
			jdbcType="decimal" mode="IN" />
		<parameter property="p_delivery_time" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_delivery_addr" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_delivery_phone" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_user_age" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_user_sex" javaType="java.lang.Integer"
			jdbcType="SMALLINT" mode="IN" />
		<parameter property="p_ip" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_salesman" javaType="java.lang.String"
			jdbcType="VARCHAR" mode="IN" />
		<parameter property="p_off_price" javaType="java.lang.Double"
			jdbcType="decimal" mode="IN" />
		<parameter property="p_result_code" javaType="java.lang.Integer"
			jdbcType="int" mode="OUT" />
	</parameterMap>

	<procedure id="p_orderCreate" parameterMap="swapParameters"> 
 		<![CDATA[
			{CALL p_order_create(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}  
   		]]>
	</procedure>

	<select id="getOrderAmount" parameterClass="String" resultClass="double">
		SELECT sum(product_amount) FROM order_product WHERE order_serial = #order_serial#
	</select>

	<update id="updateOrderStatusById" parameterClass="map">
		UPDATE order_product SET order_status = #order_status# WHERE order_id = #order_id#
	</update>

	<update id="updateOrderBaseStatus" parameterClass="map">
		UPDATE order_base SET order_status = #order_status# WHERE order_serial = #order_serial#
	</update>
	
	<update id="pickUpOrder" parameterClass="String">
		update order_base set order_status = 3, pickup_time = now(), delivery_time = now() where order_serial = #order_serial# and order_status != 3;
	</update>
	<update id="pickUpOrderProduct" parameterClass="String">
		update order_product set order_status = 3, pickup_time = now(), delivery_time = now() where order_serial = #order_serial# and order_status != 3 and order_status != 23;
	</update>

	<sql id="searchOrderBase_sql">
		FROM order_base t1 INNER JOIN user_login t2 ON t1.user_id = t2.userid
		INNER JOIN community_base t4 ON t1.community_id = t4.communityid
		LEFT JOIN delivery_detail t3 ON t1.order_serial = t3.order_serial
        WHERE t1.del_status = 0
        <isNotEmpty property="order_serial" prepend="and">
            t1.order_serial = #order_serial#
        </isNotEmpty>
        <isNotEmpty property="community_list" prepend="and">
            t1.community_id IN
            <iterate property="community_list" open="(" close=")" conjunction=",">
                #community_list[]#
            </iterate>
        </isNotEmpty>
        <isEmpty property="community_list">
            <isNotEmpty property="community_id" prepend="and">
                t1.community_id = #community_id#
            </isNotEmpty>
        </isEmpty>
        <isNotEmpty property="order_serial_array" prepend="and">
            t1.order_serial in
            <iterate close=")" open="(" conjunction="," property="order_serial_array">
                <![CDATA[
                 #order_serial_array[]#
                ]]>
            </iterate>
        </isNotEmpty>
        <isNotEmpty property="order_status" prepend="and">
            t1.order_status = #order_status#
        </isNotEmpty>
        <isNotEmpty property="order_status_array" prepend="and">
            t1.order_status in
            <iterate close=")" open="(" conjunction="," property="order_status_array">
                <![CDATA[
                 #order_status_array[]#
                ]]>
            </iterate>
        </isNotEmpty>
        <isNotEmpty property="pay_type_ext" prepend="and">
            t1.pay_type_ext = #pay_type_ext#
        </isNotEmpty>
        <isNotEmpty property="delivery_type" prepend="and">
            t1.delivery_type = #delivery_type#
        </isNotEmpty>
        <isNotEmpty property="user_name" prepend="and">
            t2.loginname = #user_name#
        </isNotEmpty>
        <isNotEmpty property="order_phone" prepend="and">
            t1.delivery_phone = #order_phone#
        </isNotEmpty>
        <isNotEmpty property="pay_type" prepend="and">
            t1.pay_type = #pay_type#
        </isNotEmpty>
        <isNotEmpty property="start_time" prepend="and">
            t1.order_time <![CDATA[>=]]> #start_time#
        </isNotEmpty>
        <isNotEmpty property="end_time" prepend="and">
            t1.order_time <![CDATA[<]]> #end_time#
        </isNotEmpty>
        <isNotEmpty property="pickup_start_time" prepend="and">
            t1.pickup_time <![CDATA[>=]]> #pickup_start_time#
        </isNotEmpty>
        <isNotEmpty property="pickup_end_time" prepend="and">
            t1.pickup_time <![CDATA[<]]> #pickup_end_time#
        </isNotEmpty>
	</sql>

	<select id="searchOrderBase" parameterClass="hashmap" resultClass="hashmap">
		SELECT t1.*, t2.loginname as username, IFNULL(t3.distri_staus,-1) distri_staus, t4.communityname
		<include refid="searchOrderBase_sql"/>
		order by t1.order_time desc
		limit #begin#,#size#;
	</select>

	<select id="searchOrderBaseCount" parameterClass="hashmap" resultClass="int">
		SELECT count(0)
		<include refid="searchOrderBase_sql"/>
	</select>

	<select id="findOrderProduct" resultClass="order" parameterClass="String">
		SELECT t1.* FROM order_product t1 WHERE order_serial = #order_serial#
	</select>

	<select id="findOrderProductTemp" resultClass="hashmap" parameterClass="String">
		SELECT t1.*,
        (SELECT IFNULL(SUM(t2.refund_amount), 0) FROM order_refund_product t2, order_refund_base t3
		WHERE t2.refund_id = t3.objid AND t3.removetag = 0 AND t3.return_status = 1 AND t2.order_id = t1.order_id) as refund_amount
        FROM order_product t1 WHERE order_serial = #order_serial#
	</select>

	<select id="getOrderBaseById" resultClass="hashmap" parameterClass="String">
		SELECT t1.*, t2.communityname as community_name, t3.username as user_name
		FROM order_base t1, community_base t2, user_login t3
		WHERE t1.community_id = t2.communityid and t1.user_id = t3.userid
		and t1.order_serial = #order_serial#
	</select>

	<select id="findOrderSerial" resultClass="String" parameterClass="hashmap">
		SELECT DISTINCT t1.order_serial FROM order_product t1
		INNER JOIN service_product t2 ON t1.product_id = t2.product_id
		INNER JOIN user_login t3 ON t1.user_id = t3.userid
		where 1=1
		<dynamic>
            <isNotEmpty property="community_list" prepend="and">
                t1.community_id IN
                <iterate property="community_list" open="(" close=")" conjunction=",">
                    #community_list[]#
                </iterate>
            </isNotEmpty>
			<isNotEmpty property="community_id" prepend="and">
				t1.community_id = #community_id#
			</isNotEmpty>
			<isNotEmpty property="product_name" prepend="and">
				t1.product_name like '%$product_name$%'
			</isNotEmpty>
			<isNotEmpty property="sid" prepend="and">
				t2.service_id = #sid#
			</isNotEmpty>
			<isNotEmpty property="keyword" prepend="and">
				(t1.order_serial = #keyword# OR t1.order_phone = #keyword# OR t3.loginname = #keyword# OR t1.product_name like '%$keyword$%')
			</isNotEmpty>
		</dynamic>
	</select>

	<update id="updateOrderBaseStatus2" parameterClass="hashmap">
		UPDATE order_base SET order_status = #order_status#
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="order_serial">
				order_serial = #order_serial#
			</isNotEmpty>
			<isNotEmpty property="order_serial_array" prepend="and">
				order_serial in
				<iterate close=")" open="(" conjunction="," property="order_serial_array">
					<![CDATA[
					 #order_serial_array[]#
					]]>
				</iterate>
			</isNotEmpty>
		</dynamic>
	</update>

	<select id="findUnPayOrder" parameterClass="int" resultClass="hashmap">
		SELECT * FROM order_base WHERE order_status = 21 AND TIMESTAMPDIFF(SECOND, order_time, NOW()) > $time$*60
	</select>
	
	<select id="selOrderProductUserid" parameterClass="string" resultClass="int">
		select user_id  from order_base where order_serial = #order_serial#
	</select>
	
<parameterMap class="java.util.HashMap" id="swapParameters_t"> 
		<parameter property="p_order_serial"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_product_id"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_product_amount"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_product_price"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_order_price"  javaType="java.lang.Double" jdbcType="decimal" mode="IN"/>
		<parameter property="p_user_id"  javaType="java.lang.Integer" jdbcType="INT" mode="IN"/> 
		<parameter property="p_pay_type"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_pay_type_ext"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_order_status"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_order_type"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_cid"  javaType="java.lang.Integer" jdbcType="int" mode="IN"/>
		<parameter property="p_sub_cid"  javaType="java.lang.Integer" jdbcType="int" mode="IN"/>
        <parameter property="p_coupon_id"  javaType="java.lang.Integer" jdbcType="int" mode="IN"/>
		<parameter property="p_channel"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_delivery_type"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_delivery_price"  javaType="java.lang.Double" jdbcType="decimal" mode="IN"/>
		<parameter property="p_delivery_time"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_delivery_addr"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_delivery_phone"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_delivery_dec"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_delivery_user"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_user_age"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_user_sex"  javaType="java.lang.Integer" jdbcType="SMALLINT" mode="IN"/>
		<parameter property="p_ip"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_salesman"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/> 
		<parameter property="p_off_price"  javaType="java.lang.Double" jdbcType="decimal" mode="IN"/>
		<parameter property="p_pay_off_all"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="p_result_code"  javaType="java.lang.Integer" jdbcType="int" mode="OUT"/>
		<parameter property="p_result_msg"  javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
	</parameterMap> 
	<procedure id="p_torderCreate" parameterMap="swapParameters_t"> 
 		<![CDATA[
			{CALL p_torder_create(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}
   		]]>
	</procedure>
	
	<select id="getNewOrderCount" resultClass="java.lang.Integer" parameterClass="map">
        SELECT COUNT(0) FROM order_base
        WHERE channel != 4 AND order_status in (1,2,22,11,12)
        AND TIMESTAMPDIFF(SECOND,order_time,NOW()) BETWEEN 0 AND 8
        <isNotEmpty property="community_id" prepend="and">
            community_id = #community_id#
        </isNotEmpty>
        <isNotEmpty property="community_list" prepend="and">
            community_id IN
            <iterate property="community_list" open="(" close=")" conjunction=",">
                #community_list[].community_id#
            </iterate>
        </isNotEmpty>
        
    </select>

    <sql id="searchProductBatch_sql">
        FROM product_batch_stock pbs
        INNER JOIN community_base cb ON pbs.community_id = cb.communityid
        INNER JOIN service_product sp ON pbs.product_id = sp.product_id
        INNER JOIN service_base sb ON sb.service_id = sp.service_id
        WHERE pbs.stock_sum != 0
        <isNotEmpty property="community_list" prepend="and">
            pbs.community_id IN
            <iterate property="community_list" open="(" close=")" conjunction=",">
                #community_list[]#
            </iterate>
        </isNotEmpty>
        <isNotEmpty property="product_name" prepend="and">
            sp.name LIKE '%$product_name$%'
        </isNotEmpty>
    </sql>

    <select id="searchProductBatch" parameterClass="hashmap" resultClass="hashmap">
        SELECT pbs.*, sp.name AS product_name, sb.service_name , cb.communityname as community_name
        <include refid="searchProductBatch_sql"/>
        ORDER BY pbs.create_time DESC
        limit #begin#,#size#
    </select>

    <select id="searchProductBatchCount" parameterClass="hashmap" resultClass="int">
        SELECT count(0)
        <include refid="searchProductBatch_sql"/>
    </select>

    <update id="finishDelivery" parameterClass="string">
        update delivery_detail
        set distri_staus=1,
        finish_time=NOW()
        where order_serial = #order_serial#
    </update>

	<select id="findDeliveryer" resultClass="hashmap" parameterClass="hashmap">
		select DISTINCT t1.* from mgr_user t1
		LEFT JOIN mgr_user_role t2 ON t1.user_id = t2.user_id
		LEFT JOIN mgr_user_community t3 ON t1.user_id = t3.user_id
		WHERE t1.activation = 1 AND t1.authenticate = 1 AND t2.role_id = #role_id#
		<isNotEmpty property="community_list" prepend="and">
			t3.community_id IN
			<iterate property="community_list" open="(" close=")" conjunction=",">
				#community_list[]#
			</iterate>
		</isNotEmpty>
	</select>
	
	<select id="getDeliveryCount" resultClass="int" parameterClass="hashmap">
		SELECT count(DISTINCT order_serial) FROM delivery_detail WHERE distri_worker_id = #distri_worker_id# AND distri_staus != #distri_staus#
	</select>

	<select id="getDeliveryAddress" resultClass="deliveryAddress" parameterClass="int">
		SELECT * FROM delivery_address WHERE user_id = #user_id# ORDER BY createTime DESC limit 1
	</select>
	
	<update id="updateDeliveryStatus" parameterClass="hashmap">
		UPDATE delivery_detail SET distri_staus = #delivery_status# WHERE order_serial = #order_serial#
	</update>

</sqlMap>